generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String           @id @default(uuid())
  name              String?
  email             String           @unique
  avatar            String?
  role              UserRole         @default(USER)
  password          String
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  username          String           @unique
  savedProblemsList List[]
  problems          Problem[]
  solvedProblems    SolvedProblems[]
  submissions       Submission[]
}

model Problem {
  id                 String           @id @default(uuid())
  title              String           @unique
  description        String
  difficulty         Difficulty
  tags               String[]
  userId             String
  examples           Json
  constraints        Json
  hints              String?
  editorial          String?
  testcases          Json
  codeSnippets       Json
  referenceSolutions Json
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  problemsInList     ProblemsinList[]
  solvedBy           SolvedProblems[]
  submissions        Submission[]
}

model Submission {
  id             String           @id @default(uuid())
  userId         String
  problemId      String
  language       String
  sourceCode     Json
  time           String?
  memory         String?
  status         String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  problem        Problem          @relation(fields: [problemId], references: [id], onDelete: Cascade)
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  testcaseResult TestcaseResult[]
}

model TestcaseResult {
  id             String     @id @default(uuid())
  submissionId   String
  testcaseNumber Int
  accepted       Boolean
  stdin          String?
  stdout         String?
  stderr         String?
  compileOutput  String?
  status         String
  time           String?
  memory         String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  submission     Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}

model SolvedProblems {
  id        String   @id @default(uuid())
  userId    String
  problemId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  problem   Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}

model List {
  id          String           @id @default(uuid())
  name        String           @unique
  description String
  userId      String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  problems    ProblemsinList[]
}

model ProblemsinList {
  id        String   @id @default(uuid())
  problemId String
  listId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  list      List     @relation(fields: [listId], references: [id], onDelete: Cascade)
  problem   Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([listId, problemId])
}

enum UserRole {
  ADMIN
  USER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}
